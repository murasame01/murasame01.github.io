<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shell语法</title>
      <link href="/2023/09/06/shell%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/09/06/shell%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><p>shell是我们通过命令行与操作系统沟通的语言。<br>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br>Linux中常见的shell脚本有很多种，常见的有：</p><blockquote><ul><li>Bourne Shell(&#x2F;usr&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;sh)</li><li>Bourne Again Shell(&#x2F;bin&#x2F;bash)</li><li>C Shell(&#x2F;usr&#x2F;bin&#x2F;csh)</li><li>K Shell(&#x2F;usr&#x2F;bin&#x2F;ksh)</li><li>…</li></ul></blockquote><p>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写#! &#x2F;bin&#x2F;bash，指明bash为脚本解释器。</p><p><strong>脚本示例</strong><br>新建一个test.sh文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">```txt</span><br><span class="line">&gt;yuki@VM-4-3-ubuntu:~$ <span class="built_in">chmod</span> +x test.sh <span class="comment"># 使脚本具有可执行权限</span></span><br><span class="line">yuki@VM-4-3-ubuntu:~$ ./test.sh  <span class="comment"># 当前路径下执行</span></span><br><span class="line">Hello World! </span><br><span class="line">yuki@VM-4-3-ubuntu:~$ /home/yuki/test.sh  <span class="comment"># 绝对路径下执行</span></span><br><span class="line">Hello World! </span><br><span class="line">yuki@VM-4-3-ubuntu:~$ ~/test.sh   <span class="comment"># 家目录路径下执行</span></span><br><span class="line">Hello World! </span><br><span class="line">yuki@VM-4-3-ubuntu:~$ </span><br></pre></td></tr></table></figure><p><strong>用解释器运行</strong><br>yuki@VM-4-3-ubuntu:~$ bash test.sh<br>Hello World!</p><hr><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p><strong>单行注释</strong><br>每行中<code>#</code>之后的内容均是注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello World&#x27;</span> </span><br></pre></td></tr></table></figure><p><strong>多行注释</strong><br>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>其中EOF可以换成其它任意字符串。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">abc</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">!</span><br></pre></td></tr></table></figure><hr><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><strong>定义变量</strong><br>定义变量，不需要加$符号，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=<span class="string">&#x27;yxc&#x27;</span>  <span class="comment"># 单引号定义字符串</span></span><br><span class="line">name2=<span class="string">&quot;yxc&quot;</span>  <span class="comment"># 双引号定义字符串</span></span><br><span class="line">name3=yxc    <span class="comment"># 也可以不加引号，同样表示字符串</span></span><br></pre></td></tr></table></figure><p><strong>使用变量</strong><br>使用变量，需要加上$符号，或者${}符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=yuki</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出yuki</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>  <span class="comment"># 输出yuki</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span><span class="built_in">tail</span><span class="comment"># 输出yukitail</span></span><br></pre></td></tr></table></figure><p><strong>只读变量</strong><br>使用readonly或者declare可以将变量变为只读。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line"><span class="built_in">declare</span> -r name  <span class="comment"># 两种写法均可</span></span><br><span class="line">name=abc  <span class="comment"># 会报错，因为此时name只读</span></span><br></pre></td></tr></table></figure><p><strong>删除变量</strong><br>unset可以删除变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yuki</span><br><span class="line"><span class="built_in">unset</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出空行</span></span><br></pre></td></tr></table></figure><p><strong>变量类型</strong></p><ol><li>自定义变量（局部变量）<br>子进程不能访问的变量</li><li>环境变量（全局变量）<br>子进程可以访问的变量</li></ol><p>自定义变量改成环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yuki@VM-4-3-ubuntu:~$ name=yuki</span><br><span class="line">yuki@VM-4-3-ubuntu:~$ <span class="built_in">export</span> name</span><br><span class="line">yuki@VM-4-3-ubuntu:~$ <span class="built_in">declare</span> -x name</span><br></pre></td></tr></table></figure><p>环境变量改为自定义变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">export</span> name=yxc  <span class="comment"># 定义环境变量</span></span><br><span class="line">acs@9e0ebfcd82d7:~$ <span class="built_in">declare</span> +x name  <span class="comment"># 改为自定义变量</span></span><br></pre></td></tr></table></figure><p><strong>字符串</strong><br>字符串可以用单引号，也可以用双引号，也可以不用引号。<br>单引号与双引号的区别：<br>单引号中的内容会原样输出，不会执行、不会取变量；<br>双引号中的内容可以执行、可以取变量；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yuki@VM-4-3-ubuntu:~$ name=yuki</span><br><span class="line">yuki@VM-4-3-ubuntu:~$ <span class="built_in">echo</span> <span class="string">&#x27;hello, $name \&quot;hh\&quot;&#x27;</span></span><br><span class="line">hello, <span class="variable">$name</span> \&quot;hh\&quot;</span><br><span class="line">yuki@VM-4-3-ubuntu:~$ <span class="built_in">echo</span> <span class="string">&quot;hello, <span class="variable">$name</span> \&quot;hh\&quot;&quot;</span></span><br><span class="line">hello, yuki <span class="string">&quot;hh&quot;</span></span><br></pre></td></tr></table></figure><p>获取字符串长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uki@VM-4-3-ubuntu:~$ name=yuki</span><br><span class="line">yuki@VM-4-3-ubuntu:~$ <span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span></span><br><span class="line">4</span><br><span class="line">yuki@VM-4-3-ubuntu:~$ str=abcdefg</span><br><span class="line">yuki@VM-4-3-ubuntu:~$ <span class="built_in">echo</span> <span class="variable">$&#123;str:0:3&#125;</span></span><br><span class="line">abc</span><br></pre></td></tr></table></figure><hr><h1 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h1><p><strong>文件参数变量</strong><br>在执行shell脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。特殊的，<code>$0</code>是文件名（包含路径）。例如：<br>创建文件test.sh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件名：&quot;</span><span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：&quot;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：&quot;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：&quot;</span><span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个参数：&quot;</span><span class="variable">$4</span></span><br></pre></td></tr></table></figure><p>然后执行该脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yuki@VM-4-3-ubuntu:~$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">yuki@VM-4-3-ubuntu:~$ ./test.sh  1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure><p><strong>其它参数相关变量</strong></p><table><thead><tr><th align="center">参数</th><th>说明</th></tr></thead><tbody><tr><td align="center"><code>$#</code></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td align="center"><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为”$1 $2 $3 $4”</td></tr><tr><td align="center"><code>$@</code></td><td>每个参数分别用双引号括起来的字符串，如上例中值为”$1” “$2” “$3” “$4”</td></tr><tr><td align="center"><code>$$</code></td><td>脚本当前运行的进程ID</td></tr><tr><td align="center"><code>$?</code></td><td>上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td align="center"><code>$(command)</code></td><td>返回command这条命令的stdout（可嵌套）</td></tr><tr><td align="center"><code>command</code></td><td>返回command这条命令的stdout（不可嵌套）</td></tr></tbody></table><hr><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<br>数组<strong>下标从0开始</strong>。<br><strong>定义</strong><br>数组用小括号表示，元素之间用空格隔开。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> yuki)</span><br></pre></td></tr></table></figure><p>也可以直接定义数组中某个元素的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=<span class="string">&quot;def&quot;</span></span><br><span class="line">array[3]=yxc</span><br></pre></td></tr></table></figure><p><strong>读取数组中某个元素的值</strong><br>格式: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[index]&#125;</span></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> yuki)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span></span><br></pre></td></tr></table></figure><p><strong>读取整个数组</strong><br>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]&#125;</span> </span><br><span class="line"><span class="variable">$&#123;array[*]&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数组长度</strong><br>类似于字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure><hr><h1 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h1><p><code>expr</code>命令用于求表达式的值，格式为：</p><blockquote><p>expr 表达式</p></blockquote><p>表达式说明：</p><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真时，stdout输出1，否则输出0。</li><li>expr的exit code：如果为逻辑关系表达式，则结果为真时，exit code为0，否则为1。</li></ul><p><strong>字符串表达式</strong></p><ul><li><code>length STRING</code></li><li>返回<code>STRING</code>的长度</li><li><code>index STRING CHARSET</code></li><li><code>CHARSET</code>中任意单个字符在<code>STRING</code>中最前面的字符位置，下标从1开始。如果在<code>STRING</code>中完全不存在<code>CHARSET</code>中的字符，则返回0。</li><li><code>substr STRING POSITION LENGTH</code></li><li>返回<code>STRING</code>字符串中从<code>POSITION</code>开始，长度最大为<code>LENGTH</code>的子串。如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</li></ul><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> length <span class="string">&quot;<span class="variable">$str</span>&quot;</span>`  <span class="comment"># ``不是单引号，表示执行该命令，输出12</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> aWd`  <span class="comment"># 输出7，下标从1开始</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> substr <span class="string">&quot;<span class="variable">$str</span>&quot;</span> 2 3`  <span class="comment"># 输出 ell</span></span><br></pre></td></tr></table></figure><p><strong>整数表达式</strong></p><ul><li><p><code>expr</code>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p></li><li><p><code>+ -</code><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>* /  %</code><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>()</code> 可以改变优先级，但需要用反斜杠转义<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`  <span class="comment"># 输出7</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>`  <span class="comment"># 输出-1</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>`  <span class="comment"># 输出12，*需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> / <span class="variable">$b</span>`  <span class="comment"># 输出0，整除</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> % <span class="variable">$b</span>` <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> \( <span class="variable">$a</span> + 1 \) \* \( <span class="variable">$b</span> + 1 \)`  <span class="comment"># 输出20，值为(a + 1) * (b + 1)</span></span><br></pre></td></tr></table></figure><p><strong>逻辑关系表达式</strong></p></li><li><p><code>|</code><br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</p></li><li><p><code>&amp;</code><br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p></li><li><p><code>&lt; &lt;= = == != &gt;= &gt;</code><br>比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p></li><li><p><code>()</code> 可以改变优先级，但需要用反斜杠转义</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&gt; <span class="variable">$b</span>`  <span class="comment"># 输出0，&gt;需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出1，也可以将特殊字符用引号引起来</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&gt;=&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&lt;\= <span class="variable">$b</span>`  <span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \&amp; <span class="variable">$d</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&amp; <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \| <span class="variable">$d</span>`  <span class="comment"># 输出5</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \| <span class="variable">$b</span>`  <span class="comment"># 输出3  </span></span><br></pre></td></tr></table></figure></h2><h1 id="read"><a href="#read" class="headerlink" title="read"></a>read</h1><p><code>read</code>命令用于从标准输入中读取单行数据。当读到文件结束符时，exit code为1，否则为0。</p><h2 id="参数说明-p-后面可以接提示信息-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令实例："><a href="#参数说明-p-后面可以接提示信息-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令实例：" class="headerlink" title="参数说明:* -p: 后面可以接提示信息* -t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令实例："></a>参数说明:<br>* -p: 后面可以接提示信息<br>* -t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令<br>实例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uki@VM-4-3-ubuntu:~/shell$ read name</span><br><span class="line">yuki</span><br><span class="line">yuki@VM-4-3-ubuntu:~/shell$ echo $name</span><br><span class="line">yuki</span><br><span class="line">yuki@VM-4-3-ubuntu:~/shell$ read -p &quot;Please input your name: &quot; -t 10</span><br><span class="line">Please input your name: yuki</span><br></pre></td></tr></table></figure></h2><h1 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h1><p><code>echo</code>用于输出字符串。命令格式：</p><blockquote><p>echo STRING</p></blockquote><h2 id="显示普通字符串显示转义字符显示变量显示换行显示不换行显示结果定向至文件原样输出字符串，不进行转义或取变量-用单引号-显示命令的执行结果echo-date"><a href="#显示普通字符串显示转义字符显示变量显示换行显示不换行显示结果定向至文件原样输出字符串，不进行转义或取变量-用单引号-显示命令的执行结果echo-date" class="headerlink" title="显示普通字符串显示转义字符显示变量显示换行显示不换行显示结果定向至文件原样输出字符串，不进行转义或取变量(用单引号)显示命令的执行结果echo date"></a><strong>显示普通字符串</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">echo</span> Hello  <span class="comment"># 引号可以省略</span></span><br></pre></td></tr></table></figure><br><strong>显示转义字符</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello\&quot;&quot;</span>  <span class="comment"># 注意只能使用双引号，如果使用单引号，则不转义</span></span><br><span class="line"><span class="built_in">echo</span> \&quot;Hello\&quot;  <span class="comment"># 也可以省略双引号</span></span><br></pre></td></tr></table></figure><br><strong>显示变量</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yuki</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My name is <span class="variable">$name</span>&quot;</span>  <span class="comment"># 输出 My name is yuki </span></span><br></pre></td></tr></table></figure><br><strong>显示换行</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi\n&quot;</span>  <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;yuki&quot;</span></span><br></pre></td></tr></table></figure><br><strong>显示不换行</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;yuki&quot;</span></span><br></pre></td></tr></table></figure><br><strong>显示结果定向至文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; output.txt  <span class="comment"># 将内容以覆盖的方式输出到output.txt中</span></span><br></pre></td></tr></table></figure><br><strong>原样输出字符串，不进行转义或取变量(用单引号)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yuki</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span></span><br></pre></td></tr></table></figure><br><strong>显示命令的执行结果</strong><br>echo <code>date</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yuki@VM-4-3-ubuntu:~/shell$ <span class="built_in">echo</span> `<span class="built_in">date</span>`</span><br><span class="line">Thu 07 Sep 2023 11:04:05 PM CST</span><br></pre></td></tr></table></figure></h2><h1 id="print"><a href="#print" class="headerlink" title="print"></a>print</h1><p><code>printf</code>命令用于格式化输出，类似于<code>C/C++</code>中的<code>printf</code>函数。<br>默认<strong>不会在字符串末尾添加换行符</strong>。<br>命令格式：</p><blockquote><p>printf format-string [arguments…]  </p></blockquote><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a><strong>用法示例</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%10d.\n&quot;</span> 123  <span class="comment"># 占10位，右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10.2f.\n&quot;</span> 123.123321  <span class="comment"># 占10位，保留2位小数，左对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;My name is %s\n&quot;</span> <span class="string">&quot;yuki&quot;</span>  <span class="comment"># 格式化输出字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d * %d = %d\n&quot;</span>  2 3 `<span class="built_in">expr</span> 2 \* 3` <span class="comment"># 表达式的值作为参数</span></span><br></pre></td></tr></table></figure></h2><h1 id="test命令与判断符号"><a href="#test命令与判断符号" class="headerlink" title="test命令与判断符号[]"></a>test命令与判断符号[]</h1><p><strong>逻辑运算符<code>&amp;&amp;</code>和<code>||</code></strong><br><code>&amp;&amp;</code> 表示与，<code>||</code> 表示或<br>二者具有短路原则：<br><code>expr1 &amp;&amp; expr2</code>：当<code>expr1</code>为假时，直接忽略<code>expr2</code><br><code>expr1 || expr2</code>：当<code>expr1</code>为真时，直接忽略<code>expr2</code><br>表达式的<code>exit code</code>为0，表示真；为非零，表示假。（与<code>C/C++</code>中的定义相反）<br><strong>test命令</strong><br>在命令行中输入<code>man test</code>，可以查看<code>test</code>命令的用法。</p><p><code>test</code>命令用于判断文件类型，以及对变量做比较。</p><p><code>test</code>命令用<code>exit code</code>返回结果，而不是使用<code>stdout</code>。0表示真，非0表示假</p><p>例如：</p><pre><code class="bash">test 2 -lt 3  # 为真，返回值为0echo $?  # 输出上个命令的返回值，输出</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh基本用法</title>
      <link href="/2023/09/06/ssh%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2023/09/06/ssh%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h1><h2 id="远程登录服务器"><a href="#远程登录服务器" class="headerlink" title="远程登录服务器"></a>远程登录服务器</h2><blockquote><p>ssh user@hostname</p></blockquote><ul><li>user: 用户名</li><li>hostname: IP地址或域名</li></ul><p>第一次登录会提示:</p><blockquote><p>The authenticity of host ‘123.57.47.211 (123.57.47.211)’ can’t be established.<br>ECDSA key fingerprint is SHA256:iy237yysfCe013&#x2F;l+kpDGfEG9xxHxm0dnxnAbJTPpG8.<br>Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?</p></blockquote><p>输入yes，然后回车即可。<br>这样会将该服务器的信息记录在~&#x2F;.ssh&#x2F;known_hosts文件中。<br>然后输入密码即可登录到远程服务器中。</p><p>*默认登录端口号为22,如果想登录某一特定端口:</p><blockquote><p>ssh user@hostname -p 22  </p></blockquote><hr><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>创建文件 ~&#x2F;.ssh&#x2F;config</p><blockquote><p>Host myserver1<br>    HostName IP地址或域名<br>    User 用户名</p></blockquote><p>Host myserver2<br>    HostName IP地址或域名<br>    User 用户名<br>之后再使用服务器时,可以直接用myserver1</p><hr><h2 id="密钥登陆"><a href="#密钥登陆" class="headerlink" title="密钥登陆"></a>密钥登陆</h2><p>创建密钥:</p><blockquote><p>ssh-keygen<br>然后一直按回车即可<br>执行结束后, ~&#x2F;.ssh&#x2F;目录下会多两个文件</p></blockquote><ul><li>id_rsa: 私钥</li><li>id_rsa.pub: 公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录myserver服务器。则将公钥中的内容，复制到myserver中的~&#x2F;.ssh&#x2F;authorized_keys文件里即可。</p><p>也可以使用如下命令一键添加公钥:</p><blockquote><p>ssh-copy-id myserver</p></blockquote><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>命令格式:</p><blockquote><p>ssh user@hostname command</p></blockquote><hr><h1 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>命令格式:</p><blockquote><p>scp source destination<br>将<code>source</code>目录下的文件复制到 <code>destination</code>中  </p></blockquote><hr><p>一次性复制多个目录:</p><blockquote><p>scp source1 source2 destination</p></blockquote><hr><p>复制文件夹:</p><blockquote><p>scp -r ~&#x2F;tmp myserver:&#x2F;home&#x2F;acs&#x2F;</p></blockquote><p>将本地目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>/home/acs/</code>目录下</p><blockquote><p>scp -r myserver:homework <strong>.</strong></p></blockquote><p>将<code>myserver</code>服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下</p><p>指定服务器端口号:</p><blockquote><p>scp -P 22 source1 source2 destination</p></blockquote><p><strong>注意</strong>： scp的-r -P等参数尽量加在source和destination之前。</p><p>使用<code>scp</code>配置其他服务器的<code>vim</code>和<code>tmux</code></p><blockquote><p>scp ~&#x2F;.vimrc ~&#x2F;.tmux.conf myserver:</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first-post</title>
      <link href="/2023/09/06/first-post/"/>
      <url>/2023/09/06/first-post/</url>
      
        <content type="html"><![CDATA[<h1 id="My-first-post"><a href="#My-first-post" class="headerlink" title="My first post"></a>My first post</h1><hr><p><img src="https://s2.loli.net/2023/08/31/hNB9guxCIfXSYal.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
